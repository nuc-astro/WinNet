/** \mainpage First steps

@tableofcontents


\htmlonly
<div style="float:right; margin: 20px 0 20px 20px; clear:both;">
    <audio controls style="background-color: white; border: 1px solid #ccc; ; padding: 5px;">
      <source src="WinNet_The_Legacy_Continues_compressed.mp3" type="audio/mpeg">
      Your browser does not support the audio element.
    </audio>
    <p style="font-size: 12px; text-align: center; color: #555;">AI generated song about WinNet (<a href="WinNet_The_Legacy_Continue_compressed.mp3" download>Download</a>)</p>
</div>
\endhtmlonly


\section getting_started Getting started
WinNet is a single zone nuclear reaction network, capable of calculating many
different nucleosynthesis processes (i.e., r-process, nup-process, explosive
nucleosynthesis, and many more). Please read and cite
[Reichert et al. 2023](https://ui.adsabs.harvard.edu/abs/2023arXiv230507048R/abstract) when you use this network. A brief overview 
of the code is also given at the [How it works](\ref how_it_works) documentation page.
When using the code check your parameter file if you used any other input file within 
your calculation that require you to cite. A list of input files with the respective 
literature can be found at the [Input files](\ref input_files) documentation page. 
We tried our best to produce a reliable code, but nevertheless we
stress that this code comes with no warranty!


    
\subsection prerequisits Prerequisits
To run WinNet you need a Fortran compiler and the Math Kernel Library (MKL). The procedure of installing both can be different for Linux, Mac, and Windows. Therefore, in order to install WinNet on Linux follow the instruction [here](\ref linux_install), for Mac [here](\ref mac_install), and for Windows [here](\ref windows_install). You can also follow the instructions [here](\ref DockerUsage) to directly download a Docker image from GitHub packages and run WinNet inside a docker container.



\section start_running Starting to run the code
The WinNet base folder includes the file _Makefile.example_ that you can change
in order to fit your needs. MAC user for example have to include additional
compiler flags that are included as a comment in the Makefile. If you are satisfied
with the _Makefile.example_ you can rename the file to Makefile.
Afterwards you can run the command "make", it should work without complaining.
If you have installed python, you can run "make tests" and all tests should pass.

\subsection parameter The parameter file
The interface between the user and the code is given in the form of parameter files.
Examples of those files can be found in the _par/_ folder. Within these files,
you can change all the input to the code. There also exist a blank template file with all 
parameters and a short description in par/template.par. An overview of all valid parameters is
given [here](\ref parameters). 

\subsection example_cases Example cases
WinNet comes with a variety of example cases. To access them you can rename the _makerun.py.example_ into _makerun.py_.
Afterwards, the list of examples is accessible by typing the command:


    python makerun.py --example

One example is executed by running

    python makerun.py -p Example_BigBang.par -r Example_BigBang

to calculate the primordial nucleosynthesis with WinNet.

\subsection monitoring_simulations Monitoring simulations

If you used _makerun.py_ to launch your simulation, the script will report the process ID
(PID) in case you decide to pause or terminate the run. Standard output and standard
error of the run are written to _OUT_ and _ERR_ files in the run output directory.
The _makerun.py_ script will also ask you if you want to monitor the simulation.
Otherwise, you can monitor the progress using the "tail -f" command, for instance:

    tail -f $WINNET/runs/Example_BigBang/OUT
    

\subsection create_movie Creating Movies

WinNet includes a convenient script for generating movies, which can be found at [bin/movie_script/winnet_movie.py](https://github.com/nuc-astro/WinNet/blob/master/bin/movie_script/winnet_movie.py). To use this script, you need to install the required Python packages listed in [bin/movie_script/requirements.txt](https://github.com/nuc-astro/WinNet/blob/master/bin/movie_script/requirements.txt). For a comprehensive guide on available parameters, you can refer to the Readme of the same [folder](https://github.com/nuc-astro/WinNet/tree/master/bin/movie_script) or access the script's help menu by running:

```python
python winnet_movie.py --help
```

Once you have completed a simulation with the appropriate parameters, you can create a movie by executing the following command:

```python
python winnet_movie.py -i path_to_simulation_directory
```

The resulting movie may resemble the following example:

@image html winteler_mhd.gif "" width=95%

\subsection compile_docs Compiling a local version of the documentation
If you have ***doxygen*** installed (see https://www.doxygen.nl/index.html) you can use it to
create a local version of the documentation by executing

    make doc

in the terminal. The compilation of the documentation was tested with doxygen version 1.8.17.

\subsection publications List of publications
Here we try to list publications that direclty use a close version of the here presented Code:

[Vonlanthen et al. (2009)](https://ui.adsabs.harvard.edu/abs/2009A%26A...503...47V/abstract),
[Winteler et al. (2012)](https://ui.adsabs.harvard.edu/abs/2012ApJ...750L..22W/abstract),
[Korobkin et al. (2012)](https://ui.adsabs.harvard.edu/abs/2012MNRAS.426.1940K/abstract),
[Rosswog et al. (2014)](https://ui.adsabs.harvard.edu/abs/2014MNRAS.439..744R/abstract),
[Grossman et al. (2014)](https://ui.adsabs.harvard.edu/abs/2014MNRAS.439..757G/abstract),
[Perego et al. (2014)](https://ui.adsabs.harvard.edu/abs/2014MNRAS.443.3134P/abstract),
[Hansen et al. (2014)](https://ui.adsabs.harvard.edu/abs/2014ApJ...797..123H/abstract),
[Perego et al. (2015)](https://ui.adsabs.harvard.edu/abs/2015ApJ...806..275P/abstract),
[Eichler et al. (2015)](https://ui.adsabs.harvard.edu/abs/2015ApJ...808...30E/abstract),
[Martin et al. (2015)](https://ui.adsabs.harvard.edu/abs/2015ApJ...813....2M/abstract),
[Martin et al. (2016)](https://ui.adsabs.harvard.edu/abs/2016PhRvL.116l1101M/abstract),
[Bliss et al. (2017)](https://ui.adsabs.harvard.edu/abs/2017JPhG...44e4003B/abstract),
[Rosswog et al. (2017)](https://ui.adsabs.harvard.edu/abs/2017CQGra..34j4001R/abstract),
[Tanvir et al. (2017)](https://ui.adsabs.harvard.edu/abs/2017ApJ...848L..27T/abstract),
[Lippuner & Roberts (2017)](https://ui.adsabs.harvard.edu/abs/2017ApJS..233...18L/abstract),
[Bovard et al. (2017)](https://ui.adsabs.harvard.edu/abs/2017PhRvD..96l4005B/abstract),
[Eichler et al. (2018)](https://ui.adsabs.harvard.edu/abs/2018JPhG...45a4001E/abstract),
[Martin et al. (2018)](https://ui.adsabs.harvard.edu/abs/2018CQGra..35c4001M/abstract),
[Bliss et al. (2018)](https://ui.adsabs.harvard.edu/abs/2018ApJ...855..135B/abstract),
[Rosswog et al. (2018)](https://ui.adsabs.harvard.edu/abs/2018A%26A...615A.132R/abstract),
[Wollaeger et al. (2018)](https://ui.adsabs.harvard.edu/abs/2018MNRAS.478.3298W/abstract),
[Koch et al. (2019)](https://ui.adsabs.harvard.edu/abs/2019A%26A...622A.159K/abstract),
[Côté et al. (2019)](https://ui.adsabs.harvard.edu/abs/2019ApJ...875..106C/abstract),
[Eichler et al. (2019)](https://ui.adsabs.harvard.edu/abs/2019ApJ...879...47E/abstract),
[Bliss et al. (2020)](https://ui.adsabs.harvard.edu/abs/2020PhRvC.101e5807B/abstract),
[Côté et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021Sci...371..945C/abstract),
[Kiss et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021ApJ...908..202K/abstract),
[Reichert et al. (2021a)](https://ui.adsabs.harvard.edu/abs/2021MNRAS.501.5733R/abstract),
[OConnor et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021MNRAS.502.1279O/abstract),
[Korobkin et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021ApJ...910..116K/abstract),
[Reichert et al. (2021b)](https://ui.adsabs.harvard.edu/abs/2021ApJ...912..157R/abstract),
[Molero et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021MNRAS.505.2913M/abstract),
[Wolleger et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021ApJ...918...10W/abstract),
[Szegedi et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021PhRvC.104c5804S/abstract),
[Witt et al. (2021)](https://ui.adsabs.harvard.edu/abs/2021ApJ...921...19W/abstract),
[Ristic et al. (2022a)](https://ui.adsabs.harvard.edu/abs/2022PhRvR...4a3046R/abstract),
[Chase et al. (2022)](https://ui.adsabs.harvard.edu/abs/2022ApJ...927..163C/abstract),
[Psaltis et al. (2022)](https://ui.adsabs.harvard.edu/abs/2022ApJ...935...27P/abstract),
[Ristic et al. (2022b)](https://ui.adsabs.harvard.edu/abs/2022arXiv220602273R/abstract).
[Setzer et al. (2023)](https://ui.adsabs.harvard.edu/abs/2023MNRAS.520.2829S/abstract),
[Navó et al. (2023)](https://ui.adsabs.harvard.edu/abs/2023ApJ...951..112N/abstract),
[Reichert et al. (2023a)](https://ui.adsabs.harvard.edu/abs/2023MNRAS.518.1557R/abstract),
[Reichert et al. (2023b)](https://ui.adsabs.harvard.edu/abs/2023arXiv230507048R/abstract)

The list above is certainly not complete. It nevertheless shows the vast variety of usecases and the scientific relevance of WinNet.

*/
